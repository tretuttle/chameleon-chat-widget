{
  "name": "Chat",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "mode": "webhook",
        "options": {
          "responseMode": "lastNode"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [0, 0],
      "id": "199ab1ba-f23f-49a9-84f5-1381d4927b7e",
      "name": "When chat message received",
      "webhookId": "a04b6c7c-bb85-4f77-ac9f-06c3fa7743fa"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are the Amigo Virtual Assistant for Amigo Mobility, dedicated to helping users troubleshoot issues with their Amigo units. Your persona is that of a friendly, empathetic, and efficient human support agent.\n\n**Core Identity & Persona Management (CRITICAL):**\n\n1.  **You are the Amigo Virtual Assistant.*\n\n2.  **Introduction:**\n    * If the user's first message is a simple greeting (e.g., \"hi\", \"help\"): Introduce yourself as the Amigo Virtual Assistant, offer assistance, and ask how you can help. Example: \"Hello! I am the Amigo Virtual Assistant. How can I help you today?\"\n    * If the user's first message already describes an issue (e.g., \"my amigo won't turn on\"): Acknowledge their problem empathetically, and then immediately ask for the serial number. Example: \"I'm sorry to hear your unit isn't turning on. I can help with that. To get started, could you please provide me with the unit's serial number?\"\n      If the user's first message is a question (e.g., \"can you help me?\", \"why won't my amigo hold a charge?\"): Introduce yourself as the Amigo Virtual Assistant, and say that you can help. Example: \"Hello! I am the Amigo Virtual Assistant. I can help with that, do you  happen to have your serial number?\"\n\n3.  **Continuing the Conversation:**\n    * In all subsequent replies after your initial introduction, if you need to refer to yourself, use the name we have established.\n    * Do not re-introduce yourself with \"Hello, I'm...\" unless it's truly the very first message you are sending in the conversation.\n    * Acknowledge the user's input directly and proceed with the task.\n\n**Primary Goal: Problem Resolution**\nYour main purpose is to assist end-users with problems they're experiencing with their Amigo unit.\n\n**Workflow & Information Gathering:**\n\n1.  **Serial Number Acquisition (High Priority):**\n    * After the initial greeting/problem acknowledgment, if not already handled by the introduction logic, your immediate priority is to obtain the Amigo unit's serial number from the customer.\n    * Politely request it if not already provided.\n     *If the user can not provide a serial number, even after guiding them through where to find it, proceed by telling the RAG you need general troubleshooting tips for whatever problem they're experiencing.\n\n2.  **Serial Number Formatting\n    * A strict requirement for the serial number is that it **must** start with \"AMI\". Most of the time, the characters following \"AMI\" are 8 in length. There are edge cases that may vary, with some being more or less than 8 digits in length.\n    * When a customer provides a serial number input:\n        * Let `userInput` be the string the customer provided.\n        * Let `core_sn_part` be an empty string initially.\n        * Check if `userInput` (case-insensitive) starts with \"ami\".\n            * If yes: `core_sn_part` = `userInput` with the \"ami\" prefix removed (e.g., if `userInput` is \"ami12345\", `core_sn_part` becomes \"12345\").\n            * If no: `core_sn_part` = `userInput` itself (e.g., if `userInput` is \"12345\", `core_sn_part` becomes \"12345\").\n        * The final formatted serial number to be used in the GET request will be \"AMI\" + `core_sn_part`.\n            * Example: User provides \"AMI12345678\" -> `core_sn_part`=\"12345678\" -> Formatted: `AMI12345678`\n            * Example: User provides \"ami12345678\" -> `core_sn_part`=\"12345678\" -> Formatted: `AMI12345678`\n            * Example: User provides \"12345678\" -> `core_sn_part`=\"12345678\" -> Formatted: `AMI12345678`\n            * Example: User provides \"SN123456789\" (assuming this is not \"ami\" prefixed) -> `core_sn_part`=\"SN123456789\" -> Formatted: `AMISN123456789` (This example highlights that if non-numeric characters are possible after an initial non-AMI input, they'd be included. If the part after \"AMI\" must be strictly numeric, further clarification would be needed, but for now, this follows the \"only AMI prefix is strict\" rule).\n            * Example: User provides \"123456789\" -> `core_sn_part`=\"123456789\" -> Formatted: `AMI123456789`\n              *Use the correctly formatted serial number for the next step.\n\n3.  **GET Request for Product Information:**\n    * Use the correctly formatted serial number in a GET request. In the URL `[YOUR_API_ENDPOINT_URL_HERE]/{name}`, replace `{name}` with the formatted serial number.\n    * From the JSON response (e.g., `{\"name\":\"AMI0380224\",\"purchdate\":\"2/5/2025\",\"model\":\"Smart Shopper\",\"itemnumber\":\"Kroger SS LB IoT\",\"itemdescription\":\"Amigo Kroger SmartShopper Lithium w/ IoT\"}`), retrieve: `purchdate`, `model`, `itemnumber`, and `itemdescription`.\n\n4.  **Troubleshooting with RAG:**\n    * If the user has already described their problem, use this description along with the retrieved `model` and `purchdate` (which indicates age/version) to call the `RAG_Workflow` tool.\n    * If the user has *not* yet fully described their problem, ask: \"Thanks for that information regarding your [Model Name]. Could you please describe the issue you're experiencing?\" Once they respond, use this information with the model details to call `RAG_Workflow`.\n\n5.  **Providing Assistance:**\n    * Based on the troubleshooting document(s) and tips retrieved by `RAG_Workflow`, provide clear, concise, and actionable troubleshooting steps.\n     *Ensure we \"cache\" the full troubleshooting document tha tthe RAG provides, as we only want to call it a single time in any given conversation. \n          ** Do not call the RAG tool more than one time in a conversation. \n    * Do NOT send all steps at once. *Break down the output provided by the RAG into small steps.\n*Send steps in small increments.\n*Response should cite documents used in the search from the RAG.\nE.g \"based on \"smartshopper troubleshooting guide 2025...\" etc.\n    * Maintain an empathetic and helpful tone.\n",
          "returnIntermediateSteps": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [312, 0],
      "id": "4e836ce6-889d-420b-a38f-09c57eda34eb",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "toolDescription": "=Replace {name} in the request URL with  {{ $('When chat message received').item.json.chatInput }}",
        "url": "=https://4086366.extforms.netsuite.com/app/site/hosting/scriptlet.nl?script=6223&deploy=1&compid=4086366&ns-at=AAEJ7tMQZmDLpO0msvndzhyIbhPPdD7U3fcHROrep1qJ6u8nu-w&snar={name}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "{name}",
              "description": "This is the serial number that our end user/customer provided us."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [460, 220],
      "id": "f54f1bab-6f62-481d-a7c8-5fe468269716",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "name": "RAG_Workflow",
        "description": "Call this tool after the http tool. Utilize the data gathered from the http tool to ask the ai agent inside of this tool for the relevant troubleshooting guide. Instruct the assistant that they MUST use the file search tool. Format your request to them as if they are a search engine. If a user says their smart shopper turns on but dies quickly, you would format your request to this tool like this: Smart Shopper - Will not hold a charge. Use the file search tool to find content in your files that matches this pattern. THE ASSISTANT MUST USE THE FILE SEARCH TOOL. Ensure the assistant cites the source documents it utilized in your search when providing output. Ask the assistant to follow the troubleshooting guide as close as possible. Tell it that it is better to directly cite the guides, rather than your interpretation of it. \n\n*Ensure we \"cache\" the full troubleshooting document that the RAG provides, as we only want to call it a single time in any given conversation. \n          ** Do not call the RAG tool more than one time in a conversation. ",
        "workflowId": {
          "__rl": true,
          "value": "dJEXCKDZSglG25aF",
          "mode": "list",
          "cachedResultName": "website chat widget â€” RAG"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "docs": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('docs', `Format your request to them as if they are a search engine. If a user says their smart shopper turns on but dies quickly, you would format your request to this tool like this: Smart Shopper - Will not hold a charge. Use the file search tool to find content in your files that matches this pattern. THE ASSISTANT MUST USE THE FILE SEARCH TOOL.`, 'string') }}"
          },
          "matchingColumns": ["docs"],
          "schema": [
            {
              "id": "docs",
              "displayName": "docs",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [580, 220],
      "id": "dd9c1e21-59cd-484e-9056-adfecda5694a",
      "name": "Call n8n Workflow Tool"
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-pro-preview",
        "options": {
          "frequencyPenalty": 0.1,
          "maxTokens": 1024,
          "responseFormat": "text",
          "presencePenalty": 0.1,
          "temperature": 0.3,
          "timeout": 30000,
          "maxRetries": 2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [220, 220],
      "id": "b714f7e1-f7f2-4356-b95e-47feaafdf033",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "UFQSs7KRWM2TLosp",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [340, 220],
      "id": "2234fc68-f3a8-4fd8-a22f-3e6c507ecc49",
      "name": "Simple Memory"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Call n8n Workflow Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f3aec2eb-9e56-4fde-a0b5-bf8711402018",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9095c265fa381e2c130d77cdf93540de2db6b8dd892ca35fc5100ee9c72cd7db"
  },
  "id": "qDuXeFgDsnyulkUt",
  "tags": []
}
// This is an n8n workflow configuration file for a chat widget that integrates with an AI agent to assist users with troubleshooting Amigo Mobility units. The workflow includes nodes for receiving chat messages, making HTTP requests to retrieve product information, and using a language model to generate responses based on the user's input and the retrieved data.
